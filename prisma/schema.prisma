// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts         Account[]
  sessions         Session[]
  productAnalyses  ProductAnalysis[]
  analysisReports  AnalysisReport[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model ProductTemplate {
  id          String   @id @default(cuid())
  name        String
  category    String
  description String?
  templateData Json    // Pre-filled form data
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("product_templates")
}

model ProductAnalysis {
  id        String   @id @default(cuid())
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // 1. Essential Information
  productName        String
  productDescription String   @db.Text
  category           String
  sourcingUrl        String?  // Alibaba link
  productImageUrl    String?  // Cloudinary image URL

  // 2. Pricing & Costs
  unitPrice          Float
  shippingCost       Float?
  brandingCost       Float?
  desiredSellingPrice Float
  competitorPrices   Json     // Array of competitor prices

  // 3. Market Trend & Interest
  googleTrends12MonthAverage Float?
  monthlySearchVolume        Int?
  isSeasonalProduct          Boolean?
  socialMediaPopularity      String? // JSON string with platform data

  // 4. Qualitative Criteria (Boolean or Rating 1-5)
  wowFactor              Int? // 1-5 rating
  simplicity             Int? // 1-5 rating (renamed from explanationSimplicity)
  easeOfUse             Int? // 1-5 rating
  solvesProblem         Boolean @default(false)
  isInnovative          Boolean @default(false)
  beforeAfterPotential  Int? // 1-5 rating

  // 5. Competition Analysis
  competitionLevel      Int? // 1-5 rating (replaces multiple fields)
  competitorCount       Int? // (renamed from directCompetitorsCount)
  competitorAdsAnalysis String? @db.Text // (replaces competitorActiveAds)
  differentiationPoints String? @db.Text // New field

  // 6. Logistics & Stock
  minimumStock         Int? // (replaces productWeight)
  deliveryTime         Int? // days (replaces restockDelay)
  storageCostPerUnit   Float? // New field
  isFragile           Boolean? // Made nullable
  availableVariants   Json? // Array instead of string

  // 7. Social Proof & Reviews
  socialProofStrength    Int? // 1-5 rating (replaces similarProductsReviewCount)
  averageReviewCount     Int? // New field
  averageRating          Float?
  socialEngagementRate   Float? // (renamed from engagementRate)
  ugcObservations        String? @db.Text // New field

  // 8. Financial & Strategic Data
  initialInvestment    Float? // New field
  marketingBudget      Float? // New field
  marketGrowthRate     Float?
  legalBarriersLevel   Int? // 1-5 rating (replaces legalBarriers string)
  strategicNotes       String? @db.Text // (replaces crossSellUpSellPotential)

  // Calculated fields
  finalScore    Float?
  niche         String?

  // Relations
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  analysisReports AnalysisReport[]

  @@map("product_analyses")
}

model AnalysisReport {
  id                String   @id @default(cuid())
  productAnalysisId String
  userId            String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Generated content - PROFESSIONAL REPORT STRUCTURE
  finalScore               Float
  
  // Executive Summary (v2.0 Professional)
  executiveSummary         String?  @db.Text
  riskAssessment          String?  @db.Text
  
  // Business Analysis
  customerPersona          String   @db.Text
  swotAnalysis            Json     // {strengths: [], weaknesses: [], opportunities: [], threats: []}
  competitiveAnalysis     Json?    // {positioning: string, advantages: [], threats: [], differentiation: []}
  
  // Market Analysis (v2.0 Professional) 
  marketAnalysis          Json?    // {size: string, growth: string, trends: [], seasonality: string}
  demandValidation        Json?    // {signals: [], risks: [], validation_methods: []}
  
  // Product Strategy (v2.0 Professional)
  productTesting          Json?    // {methodology: string, quantity: number, kpis: [], timeline: string}
  sourcingStrategy        Json?    // {suppliers: [], negotiation: [], quality_control: [], logistics: []}
  
  // Marketing Strategy (v2.0 Professional)
  tiktokStrategy          Json?    // {organic: {}, viral_content: {}, influencers: {}}
  metaAdsStrategy         Json?    // {audiences: [], creatives: [], budgets: [], funnels: []}
  marketingStrategy       Json     // {channels: [], budget_allocation: {}, launch_plan: {}}
  
  // Operations (v2.0 Professional)
  operationalPlan         Json?    // {inventory: {}, fulfillment: {}, customer_service: {}}
  financialProjections   Json?    // {revenue: {}, costs: {}, roi: {}, break_even: {}}
  
  // Action Plan (v2.0 Professional)
  implementationRoadmap   Json?    // {phases: [], milestones: [], timeline: {}}
  kpiDashboard           Json?    // {metrics: [], targets: [], monitoring: []}
  contingencyPlans       Json?    // {scenarios: [], mitigation: [], pivots: []}

  // AI generation metadata
  aiModel          String  @default("gemini-1.5-flash")
  generationPrompt String? @db.Text
  processingTime   Int?    // milliseconds
  reportVersion    String  @default("v2.0-professional")
  
  // Professional Report Settings
  reportTemplate   String  @default("ecommerce-professional")
  analysisDepth    String  @default("comprehensive") // basic, detailed, comprehensive
  industryFocus    String? // e-commerce, saas, physical-products, etc.

  // Relations
  productAnalysis ProductAnalysis @relation(fields: [productAnalysisId], references: [id], onDelete: Cascade)
  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("analysis_reports")
}